{"filter":false,"title":"password_resets_test.rb","tooltip":"/test/integration/password_resets_test.rb","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":3,"column":2},"end":{"row":5,"column":7},"action":"remove","lines":["# test \"the truth\" do","  #   assert true","  # end"]},{"start":{"row":3,"column":2},"end":{"row":59,"column":5},"action":"insert","lines":["def setup","    ActionMailer::Base.deliveries.clear","    @user = users(:michael)","  end","","  test \"password resets\" do","    get new_password_reset_path","    assert_template 'password_resets/new'","    # Invalid email","    post password_resets_path, password_reset: { email: \"\" }","    assert_not flash.empty?","    assert_template 'password_resets/new'","    # Valid email","    post password_resets_path, password_reset: { email: @user.email }","    assert_not_equal @user.reset_digest, @user.reload.reset_digest","    assert_equal 1, ActionMailer::Base.deliveries.size","    assert_not flash.empty?","    assert_redirected_to root_url","    # Password reset form","    user = assigns(:user)","    # Wrong email","    get edit_password_reset_path(user.reset_token, email: \"\")","    assert_redirected_to root_url","    # Inactive user","    user.toggle!(:activated)","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_redirected_to root_url","    user.toggle!(:activated)","    # Right email, wrong token","    get edit_password_reset_path('wrong token', email: user.email)","    assert_redirected_to root_url","    # Right email, right token","    get edit_password_reset_path(user.reset_token, email: user.email)","    assert_template 'password_resets/edit'","    assert_select \"input[name=email][type=hidden][value=?]\", user.email","    # Invalid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"barquux\" }","    assert_select 'div#error_explanation'","    # Blank password","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"  \",","                  password_confirmation: \"foobar\" }","    assert_not flash.empty?","    assert_template 'password_resets/edit'","    # Valid password & confirmation","    patch password_reset_path(user.reset_token),","          email: user.email,","          user: { password:              \"foobaz\",","                  password_confirmation: \"foobaz\" }","    assert is_logged_in?","    assert_not flash.empty?","    assert_redirected_to user","  end"]}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":9,"column":31},"end":{"row":9,"column":31},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1425719758000,"hash":"baba81be1c97375b6d64bd2f55f291dc0cb4c1a3"}