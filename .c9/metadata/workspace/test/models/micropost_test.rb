{"filter":false,"title":"micropost_test.rb","tooltip":"/test/models/micropost_test.rb","ace":{"folds":[],"scrolltop":37,"scrollleft":0,"selection":{"start":{"row":30,"column":5},"end":{"row":30,"column":5},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"655185216a268587ab6b065af56e031203c3a5f6","undoManager":{"mark":7,"position":7,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":7,"column":0},"action":"remove","lines":["require 'test_helper'","","class MicropostTest < ActiveSupport::TestCase","  # test \"the truth\" do","  #   assert true","  # end","end",""]},{"start":{"row":0,"column":0},"end":{"row":18,"column":3},"action":"insert","lines":["require 'test_helper'","","class MicropostTest < ActiveSupport::TestCase","","  def setup","    @user = users(:michael)","    # This code is not idiomatically correct.","    @micropost = Micropost.new(content: \"Lorem ipsum\", user_id: @user.id)","  end","","  test \"should be valid\" do","    assert @micropost.valid?","  end","","  test \"user id should be present\" do","    @micropost.user_id = nil","    assert_not @micropost.valid?","  end","end"]}]}],[{"group":"doc","deltas":[{"start":{"row":17,"column":5},"end":{"row":18,"column":0},"action":"insert","lines":["",""]},{"start":{"row":18,"column":0},"end":{"row":18,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":18,"column":2},"end":{"row":19,"column":0},"action":"insert","lines":["",""]},{"start":{"row":19,"column":0},"end":{"row":19,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":19,"column":2},"end":{"row":27,"column":5},"action":"insert","lines":["test \"content should be present \" do","    @micropost.content = \"   \"","    assert_not @micropost.valid?","  end","","  test \"content should be at most 140 characters\" do","    @micropost.content = \"a\" * 141","    assert_not @micropost.valid?","  end"]}]}],[{"group":"doc","deltas":[{"start":{"row":6,"column":4},"end":{"row":7,"column":73},"action":"remove","lines":["# This code is not idiomatically correct.","    @micropost = Micropost.new(content: \"Lorem ipsum\", user_id: @user.id)"]},{"start":{"row":6,"column":4},"end":{"row":6,"column":63},"action":"insert","lines":["@micropost = @user.microposts.build(content: \"Lorem ipsum\")"]}]}],[{"group":"doc","deltas":[{"start":{"row":26,"column":5},"end":{"row":27,"column":0},"action":"insert","lines":["",""]},{"start":{"row":27,"column":0},"end":{"row":27,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":27,"column":2},"end":{"row":28,"column":0},"action":"insert","lines":["",""]},{"start":{"row":28,"column":0},"end":{"row":28,"column":2},"action":"insert","lines":["  "]}]}],[{"group":"doc","deltas":[{"start":{"row":28,"column":2},"end":{"row":30,"column":5},"action":"insert","lines":["test \"order should be most recent first\" do","    assert_equal Micropost.first, microposts(:most_recent)","  end"]}]}]]},"timestamp":1425821297000}